;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DDCWrapper : 
  module DDC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {data : UInt<8>, sync : UInt<1>}, out : {data : UInt<1>, update : UInt<1>, readData : SInt<8>, value : UInt<16>}}
    
    wire yListRefer : SInt<8>[10] @[DDC.scala 46:27]
    yListRefer[0] <= asSInt(UInt<1>("h00")) @[DDC.scala 46:27]
    yListRefer[1] <= asSInt(UInt<8>("h04a")) @[DDC.scala 46:27]
    yListRefer[2] <= asSInt(UInt<8>("h078")) @[DDC.scala 46:27]
    yListRefer[3] <= asSInt(UInt<8>("h078")) @[DDC.scala 46:27]
    yListRefer[4] <= asSInt(UInt<8>("h04a")) @[DDC.scala 46:27]
    yListRefer[5] <= asSInt(UInt<1>("h00")) @[DDC.scala 46:27]
    yListRefer[6] <= asSInt(UInt<8>("h0b6")) @[DDC.scala 46:27]
    yListRefer[7] <= asSInt(UInt<8>("h088")) @[DDC.scala 46:27]
    yListRefer[8] <= asSInt(UInt<8>("h088")) @[DDC.scala 46:27]
    yListRefer[9] <= asSInt(UInt<8>("h0b6")) @[DDC.scala 46:27]
    wire _yListMul_WIRE : SInt<16>[11] @[DDC.scala 48:33]
    _yListMul_WIRE[0] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[1] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[2] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[3] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[4] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[5] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[6] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[7] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[8] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[9] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    _yListMul_WIRE[10] <= asSInt(UInt<16>("h00")) @[DDC.scala 48:33]
    reg yListMul : SInt<16>[11], clock with : (reset => (reset, _yListMul_WIRE)) @[DDC.scala 48:25]
    reg cnt : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[DDC.scala 50:20]
    reg run : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DDC.scala 51:20]
    reg out : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DDC.scala 63:20]
    reg update : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DDC.scala 64:23]
    io.out.value <= UInt<1>("h00") @[DDC.scala 66:16]
    io.out.readData <= asSInt(UInt<1>("h00")) @[DDC.scala 67:19]
    io.out.update <= update @[DDC.scala 68:17]
    when io.in.sync : @[DDC.scala 70:21]
      wire _yListMul_0_WIRE : SInt<8> @[DDC.scala 71:63]
      node _yListMul_0_T = asUInt(yListRefer[0]) @[DDC.scala 71:63]
      node _yListMul_0_T_1 = asSInt(_yListMul_0_T) @[DDC.scala 71:63]
      _yListMul_0_WIRE <= _yListMul_0_T_1 @[DDC.scala 71:63]
      node _yListMul_0_T_2 = mul(io.out.readData, _yListMul_0_WIRE) @[DDC.scala 71:39]
      wire _yListMul_0_WIRE_1 : SInt<16> @[DDC.scala 71:84]
      node _yListMul_0_T_3 = asUInt(_yListMul_0_T_2) @[DDC.scala 71:84]
      node _yListMul_0_T_4 = asSInt(_yListMul_0_T_3) @[DDC.scala 71:84]
      _yListMul_0_WIRE_1 <= _yListMul_0_T_4 @[DDC.scala 71:84]
      yListMul[UInt<1>("h00")] <= _yListMul_0_WIRE_1 @[DDC.scala 71:19]
      cnt <= UInt<1>("h01") @[DDC.scala 72:9]
      run <= UInt<1>("h01") @[DDC.scala 73:9]
      skip @[DDC.scala 70:21]
    else : @[DDC.scala 74:16]
      when run : @[DDC.scala 75:16]
        node _T = eq(cnt, UInt<6>("h031")) @[DDC.scala 77:17]
        when _T : @[DDC.scala 77:64]
          cnt <= UInt<1>("h00") @[DDC.scala 78:13]
          run <= io.in.sync @[DDC.scala 79:13]
          node _ave_T = add(yListMul[0], yListMul[1]) @[DDC.scala 55:33]
          node _ave_T_1 = tail(_ave_T, 1) @[DDC.scala 55:33]
          node _ave_T_2 = asSInt(_ave_T_1) @[DDC.scala 55:33]
          node _ave_T_3 = add(_ave_T_2, yListMul[2]) @[DDC.scala 55:33]
          node _ave_T_4 = tail(_ave_T_3, 1) @[DDC.scala 55:33]
          node _ave_T_5 = asSInt(_ave_T_4) @[DDC.scala 55:33]
          node _ave_T_6 = add(_ave_T_5, yListMul[3]) @[DDC.scala 55:33]
          node _ave_T_7 = tail(_ave_T_6, 1) @[DDC.scala 55:33]
          node _ave_T_8 = asSInt(_ave_T_7) @[DDC.scala 55:33]
          node _ave_T_9 = add(_ave_T_8, yListMul[4]) @[DDC.scala 55:33]
          node _ave_T_10 = tail(_ave_T_9, 1) @[DDC.scala 55:33]
          node _ave_T_11 = asSInt(_ave_T_10) @[DDC.scala 55:33]
          node _ave_T_12 = add(_ave_T_11, yListMul[5]) @[DDC.scala 55:33]
          node _ave_T_13 = tail(_ave_T_12, 1) @[DDC.scala 55:33]
          node _ave_T_14 = asSInt(_ave_T_13) @[DDC.scala 55:33]
          node _ave_T_15 = add(_ave_T_14, yListMul[6]) @[DDC.scala 55:33]
          node _ave_T_16 = tail(_ave_T_15, 1) @[DDC.scala 55:33]
          node _ave_T_17 = asSInt(_ave_T_16) @[DDC.scala 55:33]
          node _ave_T_18 = add(_ave_T_17, yListMul[7]) @[DDC.scala 55:33]
          node _ave_T_19 = tail(_ave_T_18, 1) @[DDC.scala 55:33]
          node _ave_T_20 = asSInt(_ave_T_19) @[DDC.scala 55:33]
          node _ave_T_21 = add(_ave_T_20, yListMul[8]) @[DDC.scala 55:33]
          node _ave_T_22 = tail(_ave_T_21, 1) @[DDC.scala 55:33]
          node _ave_T_23 = asSInt(_ave_T_22) @[DDC.scala 55:33]
          node _ave_T_24 = add(_ave_T_23, yListMul[9]) @[DDC.scala 55:33]
          node _ave_T_25 = tail(_ave_T_24, 1) @[DDC.scala 55:33]
          node _ave_T_26 = asSInt(_ave_T_25) @[DDC.scala 55:33]
          node _ave_T_27 = add(_ave_T_26, yListMul[10]) @[DDC.scala 55:33]
          node _ave_T_28 = tail(_ave_T_27, 1) @[DDC.scala 55:33]
          node ave = asSInt(_ave_T_28) @[DDC.scala 55:33]
          node _T_1 = gt(ave, asSInt(UInt<1>("h00"))) @[DDC.scala 56:15]
          when _T_1 : @[DDC.scala 56:22]
            out <= UInt<1>("h01") @[DDC.scala 57:11]
            skip @[DDC.scala 56:22]
          else : @[DDC.scala 58:18]
            out <= UInt<1>("h00") @[DDC.scala 59:11]
            skip @[DDC.scala 58:18]
          node _update_T = not(update) @[DDC.scala 81:19]
          update <= _update_T @[DDC.scala 81:16]
          skip @[DDC.scala 77:64]
        else : @[DDC.scala 82:20]
          node _cnt_T = add(cnt, UInt<1>("h01")) @[DDC.scala 83:20]
          node _cnt_T_1 = tail(_cnt_T, 1) @[DDC.scala 83:20]
          cnt <= _cnt_T_1 @[DDC.scala 83:13]
          skip @[DDC.scala 82:20]
        node _T_2 = gt(io.in.data, UInt<7>("h07f")) @[DDC.scala 38:13]
        when _T_2 : @[DDC.scala 38:23]
          node _io_out_readData_T = sub(io.in.data, UInt<7>("h07f")) @[DDC.scala 39:21]
          node _io_out_readData_T_1 = tail(_io_out_readData_T, 1) @[DDC.scala 39:21]
          wire _io_out_readData_WIRE : SInt<8> @[DDC.scala 39:39]
          node _io_out_readData_T_2 = asSInt(_io_out_readData_T_1) @[DDC.scala 39:39]
          _io_out_readData_WIRE <= _io_out_readData_T_2 @[DDC.scala 39:39]
          io.out.readData <= _io_out_readData_WIRE @[DDC.scala 39:15]
          skip @[DDC.scala 38:23]
        else : @[DDC.scala 40:18]
          node _io_out_readData_T_3 = sub(UInt<7>("h07f"), io.in.data) @[DDC.scala 41:27]
          node _io_out_readData_T_4 = tail(_io_out_readData_T_3, 1) @[DDC.scala 41:27]
          wire _io_out_readData_WIRE_1 : SInt<8> @[DDC.scala 41:40]
          node _io_out_readData_T_5 = asSInt(_io_out_readData_T_4) @[DDC.scala 41:40]
          _io_out_readData_WIRE_1 <= _io_out_readData_T_5 @[DDC.scala 41:40]
          node _io_out_readData_T_6 = sub(asSInt(UInt<1>("h00")), _io_out_readData_WIRE_1) @[DDC.scala 41:18]
          node _io_out_readData_T_7 = tail(_io_out_readData_T_6, 1) @[DDC.scala 41:18]
          node _io_out_readData_T_8 = asSInt(_io_out_readData_T_7) @[DDC.scala 41:18]
          io.out.readData <= _io_out_readData_T_8 @[DDC.scala 41:15]
          skip @[DDC.scala 40:18]
        node _mul_T = bits(cnt, 3, 0)
        wire _mul_WIRE : SInt<8> @[DDC.scala 86:60]
        node _mul_T_1 = asUInt(yListRefer[_mul_T]) @[DDC.scala 86:60]
        node _mul_T_2 = asSInt(_mul_T_1) @[DDC.scala 86:60]
        _mul_WIRE <= _mul_T_2 @[DDC.scala 86:60]
        node _mul_T_3 = mul(io.out.readData, _mul_WIRE) @[DDC.scala 86:34]
        wire mul : SInt<16> @[DDC.scala 86:81]
        node _mul_T_4 = asUInt(_mul_T_3) @[DDC.scala 86:81]
        node _mul_T_5 = asSInt(_mul_T_4) @[DDC.scala 86:81]
        mul <= _mul_T_5 @[DDC.scala 86:81]
        node _T_3 = bits(cnt, 3, 0)
        yListMul[_T_3] <= mul @[DDC.scala 87:21]
        wire _io_out_value_WIRE : UInt<16> @[DDC.scala 88:35]
        node _io_out_value_T = asUInt(mul) @[DDC.scala 88:35]
        _io_out_value_WIRE <= _io_out_value_T @[DDC.scala 88:35]
        io.out.value <= _io_out_value_WIRE @[DDC.scala 88:20]
        skip @[DDC.scala 75:16]
      skip @[DDC.scala 74:16]
    io.out.data <= out @[DDC.scala 92:15]
    
  module DDCWrapper : 
    output io : {flip in : {data : UInt<8>, sync : UInt<1>}, out : {data : UInt<1>, update : UInt<1>, readData : SInt<8>, value : UInt<16>}, flip clock : Clock, flip resetN : UInt<1>}
    
    node _T = not(io.resetN) @[DDC.scala 113:31]
    inst module of DDC @[DDC.scala 114:24]
    module.clock <= io.clock
    module.reset <= _T
    module.io.in.sync <= io.in.sync @[DDC.scala 115:18]
    module.io.in.data <= io.in.data @[DDC.scala 115:18]
    io.out.value <= module.io.out.value @[DDC.scala 116:19]
    io.out.readData <= module.io.out.readData @[DDC.scala 116:19]
    io.out.update <= module.io.out.update @[DDC.scala 116:19]
    io.out.data <= module.io.out.data @[DDC.scala 116:19]
    
