circuit Booth :
  module Booth :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip x : UInt<16>, flip y : UInt<16>, busy : UInt<1>, flip start : UInt<1>, z : UInt<32>}

    reg a : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[Booth.scala 16:18]
    reg q : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[Booth.scala 17:18]
    reg qExtra : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Booth.scala 18:23]
    reg cnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Booth.scala 19:20]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Booth.scala 23:22]
    wire nextState : UInt<2> @[Booth.scala 24:23]
    node _T = mux(io.start, UInt<2>("h1"), UInt<2>("h0")) @[Booth.scala 26:21]
    node _T_1 = eq(cnt, UInt<4>("hf")) @[Booth.scala 27:29]
    node _T_2 = mux(_T_1, UInt<2>("h2"), UInt<2>("h1")) @[Booth.scala 27:24]
    node _nextState_T = eq(UInt<2>("h0"), state) @[Mux.scala 81:61]
    node _nextState_T_1 = mux(_nextState_T, _T, UInt<2>("h0")) @[Mux.scala 81:58]
    node _nextState_T_2 = eq(UInt<2>("h1"), state) @[Mux.scala 81:61]
    node _nextState_T_3 = mux(_nextState_T_2, _T_2, _nextState_T_1) @[Mux.scala 81:58]
    node _nextState_T_4 = eq(UInt<2>("h2"), state) @[Mux.scala 81:61]
    node _nextState_T_5 = mux(_nextState_T_4, UInt<2>("h0"), _nextState_T_3) @[Mux.scala 81:58]
    nextState <= _nextState_T_5 @[Booth.scala 30:13]
    state <= nextState @[Booth.scala 31:9]
    io.busy <= UInt<1>("h0") @[Booth.scala 33:11]
    io.z <= UInt<1>("h0") @[Booth.scala 34:8]
    node _minusX_T = sub(UInt<1>("h0"), io.x) @[Booth.scala 36:16]
    node minusX = tail(_minusX_T, 1) @[Booth.scala 36:16]
    node _T_3 = eq(UInt<2>("h0"), state) @[Booth.scala 53:17]
    when _T_3 : @[Booth.scala 53:17]
      q <= io.y @[Booth.scala 55:9]
      cnt <= UInt<1>("h0") @[Booth.scala 56:11]
    else :
      node _T_4 = eq(UInt<2>("h1"), state) @[Booth.scala 53:17]
      when _T_4 : @[Booth.scala 53:17]
        io.busy <= UInt<1>("h1") @[Booth.scala 59:15]
        node _T_5 = bits(q, 0, 0) @[Booth.scala 38:16]
        node _T_6 = bits(_T_5, 0, 0) @[Booth.scala 38:20]
        wire _WIRE : UInt<1>[2] @[Booth.scala 40:21]
        _WIRE[0] <= qExtra @[Booth.scala 40:21]
        _WIRE[1] <= _T_6 @[Booth.scala 40:21]
        node _T_7 = cat(_WIRE[1], _WIRE[0]) @[Booth.scala 40:50]
        node _T_8 = bits(reset, 0, 0) @[Booth.scala 60:13]
        node _T_9 = eq(_T_8, UInt<1>("h0")) @[Booth.scala 60:13]
        when _T_9 : @[Booth.scala 60:13]
          printf(clock, UInt<1>("h1"), "[%d state=%d] a=%b, q=%b, qExtra=%b, pack=%b, x=%b, -x=%b\n", cnt, state, a, q, qExtra, _T_7, io.x, minusX) : printf @[Booth.scala 60:13]
        node _T_10 = bits(q, 0, 0) @[Booth.scala 38:16]
        node _T_11 = bits(_T_10, 0, 0) @[Booth.scala 38:20]
        wire _WIRE_1 : UInt<1>[2] @[Booth.scala 40:21]
        _WIRE_1[0] <= qExtra @[Booth.scala 40:21]
        _WIRE_1[1] <= _T_11 @[Booth.scala 40:21]
        node _T_12 = cat(_WIRE_1[1], _WIRE_1[0]) @[Booth.scala 40:50]
        node _T_13 = eq(UInt<1>("h1"), _T_12) @[Mux.scala 81:61]
        node _T_14 = mux(_T_13, io.x, UInt<1>("h0")) @[Mux.scala 81:58]
        node _T_15 = eq(UInt<2>("h2"), _T_12) @[Mux.scala 81:61]
        node _T_16 = mux(_T_15, minusX, _T_14) @[Mux.scala 81:58]
        node _aNext_T = add(a, _T_16) @[Booth.scala 44:20]
        node aNext = tail(_aNext_T, 1) @[Booth.scala 44:20]
        wire _aqNext_WIRE : UInt<16>[2] @[Booth.scala 45:26]
        _aqNext_WIRE[0] <= q @[Booth.scala 45:26]
        _aqNext_WIRE[1] <= aNext @[Booth.scala 45:26]
        node _aqNext_T = cat(_aqNext_WIRE[1], _aqNext_WIRE[0]) @[Booth.scala 45:50]
        node _aqNext_T_1 = asSInt(_aqNext_T) @[Booth.scala 45:57]
        node _aqNext_T_2 = dshr(_aqNext_T_1, UInt<1>("h1")) @[Booth.scala 45:64]
        node aqNext = asUInt(_aqNext_T_2) @[Booth.scala 45:72]
        node _qExtraNext_T = bits(q, 0, 0) @[Booth.scala 38:16]
        node qExtraNext = bits(_qExtraNext_T, 0, 0) @[Booth.scala 38:20]
        qExtra <= qExtraNext @[Booth.scala 47:12]
        node _a_T = bits(aqNext, 31, 16) @[Booth.scala 48:16]
        a <= _a_T @[Booth.scala 48:7]
        node _q_T = bits(aqNext, 15, 0) @[Booth.scala 49:16]
        q <= _q_T @[Booth.scala 49:7]
        node _T_17 = bits(reset, 0, 0) @[Booth.scala 50:11]
        node _T_18 = eq(_T_17, UInt<1>("h0")) @[Booth.scala 50:11]
        when _T_18 : @[Booth.scala 50:11]
          printf(clock, UInt<1>("h1"), "a: %b -> %b; aqNext: %b; q_-1: %b -> %b; addValue = %b\n", a, aNext, aqNext, qExtra, qExtraNext, _T_16) : printf_1 @[Booth.scala 50:11]
        node _cnt_T = add(cnt, UInt<1>("h1")) @[Booth.scala 62:18]
        node _cnt_T_1 = tail(_cnt_T, 1) @[Booth.scala 62:18]
        cnt <= _cnt_T_1 @[Booth.scala 62:11]
      else :
        node _T_19 = eq(UInt<2>("h2"), state) @[Booth.scala 53:17]
        when _T_19 : @[Booth.scala 53:17]
          cnt <= UInt<1>("h0") @[Booth.scala 65:11]
          wire _result_WIRE : UInt<16>[2] @[Booth.scala 66:27]
          _result_WIRE[0] <= q @[Booth.scala 66:27]
          _result_WIRE[1] <= a @[Booth.scala 66:27]
          node result = cat(_result_WIRE[1], _result_WIRE[0]) @[Booth.scala 66:47]
          io.z <= result @[Booth.scala 67:12]
          node _T_20 = bits(reset, 0, 0) @[Booth.scala 68:13]
          node _T_21 = eq(_T_20, UInt<1>("h0")) @[Booth.scala 68:13]
          when _T_21 : @[Booth.scala 68:13]
            printf(clock, UInt<1>("h1"), "result = %b\n", result) : printf_2 @[Booth.scala 68:13]

